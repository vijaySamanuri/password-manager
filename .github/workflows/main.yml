name: CICD

# triggers when a tagged commit is merged 
on:
  push:
    tags:
    - "v*"
env:
  NAMESPACE: password-manager
  DOCKER_REGISTRY: https://index.docker.io/v1/
  DOCKER_EMAIL: raju.rama.vijay@gmail.com
  
jobs:
  # This workflow contains one job called buildanddeploy which does the following series of steps:
  #  checkout source code, build, push, scan and deploy to eks
  buildanddeploy:
    # I am taking ubuntu runner
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out repository under $GITHUB_WORKSPACE, we can access through this variable
      - uses: actions/checkout@v2
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.1.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   
          repository: ${{ secrets.DOCKER_USERNAME }}/password-manager
          tag_with_ref: true
 
      - name: Get the image tag
        id: get_tag
        run: echo "::set-output name=image_tag::${GITHUB_REF##*/}" 
  
      # scan the image for any vulnerabilities, stop if there are any critical or high vulnerabilites
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with: 
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/password-manager:${{ steps.get_tag.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
       
      # update the image tag in the kubernetes manifest file
      - name: update Image Tag in k8s deploy artifact
        run: |
          sed -i "s/{{ image_tag }}/$IMAGE_TAG/g" kubernetes/deployment.yaml
        env:
          IMAGE_TAG: ${{ steps.get_tag.outputs.image_tag }}
      
      # we need to create image pull secret in kubernetes cluster for kubernetes to pull image from the registry.
      # we are making use of docker hub for storing our built image so we need to create secret having docker hub credentials
      # we can either assign this to the service account or add as imagepullsecret for the pod.      
      # Note: this step is optional in case container registry is ECR since EKS can freely pull from ECR of the same account
      # 
      - name: create imagePullSecret in eks cluster
        run: |
          echo "creating kubeconfig"
          echo "$KUBECONFIG" | base64 --decode > /tmp/config
          export KUBECONFIG=/tmp/config
          echo "Creating imagePullSecret in eks cluster for docker hub"
          kubectl create secret docker-registry regcred --docker-server="${DOCKER_REGISTRY}" --docker-username=${DOCKER_USERNAME} --docker-password=${{ secrets.DOCKER_PASSWORD }} --docker-email=${DOCKER_EMAIL} -n ${NAMESPACE} --dry-run=client -o yaml > /tmp/imagePullSecret.yaml
          kubectl apply -f /tmp/imagePullSecret.yaml
          rm -f /tmp/imagePullSecret.yaml
        env:       
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      # github ubuntu latest runners would have already installed majority of tools like docker and kubectl
      # So i can directly execute kubectl commands like above but i wanted to try one of the popular kubectl plugin for the next steps just for the sake of mixed approach
      - name: deploy to eks cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: apply -f kubernetes/ -n ${{ env.NAMESPACE }}
        
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: '"rollout status deployment/password-manager -n ${{ env.NAMESPACE }}"'  
