name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
    - "v*"
env:
  NAMESPACE: password-manager
  DOCKER_REGISTRY: https://index.docker.io/v1/
  DOCKER_EMAIL: raju.rama.vijay@gmail.com
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # TODO make use of build spec and do it
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.1.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   
          repository: ${{ secrets.DOCKER_USERNAME }}/password-manager
          tag_with_ref: true
 
      - name: Get the image tag
        id: get_tag
        run: echo "::set-output name=image_tag::${GITHUB_REF##*/}" 
        
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with: 
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/password-manager:${{ steps.get_tag.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        
      - name: update Image Tag
        run: |
          sed -i "s/{{ image_tag }}/$IMAGE_TAG/g" kubernetes/deployment.yaml
        env:
          IMAGE_TAG: ${{ steps.get_tag.outputs.image_tag }}
          
      - name: create imagePullSecret in eks cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: create secret docker-registry regcred --docker-server="${{ env.DOCKER_REGISTRY }}" --docker-username=${{ secrets.DOCKER_USERNAME }} --docker-password=${{ secrets.DOCKER_PASSWORD }} --docker-email=${{ env.DOCKER_EMAIL }} -n ${{ env.NAMESPACE }}
          
      - name: deploy to eks cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: apply -f kubernetes/ -n ${{ env.NAMESPACE }}
        
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: '"rollout status deployment/password-manager"'  
          
#      - name: Deploy to kubernetes
#        run: |
#          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
#          chmod +x kubectl 
#          ./kubectl version
#          mkdir -p ~/.kube
#          echo $KUBECONFIG > ~/.kube/config
#          ./kubectl create secret docker-registry regcred --docker-server="${DOCKER_REGISTRY}" --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --docker-email=${DOCKER_EMAIL} -n $NAMESPACE #         
#          ./kubectl apply -f kubernetes/ -n $NAMESPACE 
#          rm -f ~/.kube/config
#        env:       
#         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#         KUBECONFIG: ${{ secrets.KUBECONFIG }}
